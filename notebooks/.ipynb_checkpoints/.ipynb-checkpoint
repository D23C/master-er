{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ciclo de Rankine\n",
    "\n",
    "Estudio de un ciclo ideal de Rankine básico (sin recalentamiento). Datos de partida:\n",
    "\n",
    "* Temperatura del agua a la entrada del boiler: 26,85 ºC (300 K)\n",
    "* Temperatura del vapor a la entrada de la turbina: 626,85 ºC (900 K)\n",
    "* Presión a la entrada del boiler: 10 kPa\n",
    "* Presión a la entrada de la turbina: 10 MPa\n",
    "* Flujo de vapor: 20 kg/s\n",
    "\n",
    "Eficiencias de los equipos: como es el ciclo ideal, de momento las dejamos a 1. Pero dejaremos preparado el código para añadir las eficiencias más tarde."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importamos los paquetes necesarios\n",
    "\n",
    "import cantera as ct\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Funciones de visualización\n",
    "\n",
    "def plot_water_curve(w):\n",
    "    Ts = np.linspace(274, w.critical_temperature-0.1, 1000)\n",
    "    Xs = 0\n",
    "    T_line = []\n",
    "    s_line = []\n",
    "    for i in Ts:\n",
    "        w.TX = i, 0.0\n",
    "        T_line.append(w.T)\n",
    "        s_line.append(w.s)\n",
    "\n",
    "    Ts2 = np.linspace(w.critical_temperature-0.1, 274, 1000)\n",
    "    Xs2 = 1\n",
    "    T2_line = []\n",
    "    s2_line = []\n",
    "    for i in Ts:\n",
    "        w.TX = i, 1.0\n",
    "        T2_line.append(w.T)\n",
    "        s2_line.append(w.s)\n",
    "    \n",
    "    plt.plot(s_line, T_line, color='blue')\n",
    "    plt.plot(s2_line, T2_line, color='blue')\n",
    "    plt.ylim(0, 1000)\n",
    "\n",
    "    \n",
    "def plot_isobar(P):\n",
    "    Ts3 = np.linspace(w.critical_temperature-0.1, 650, 1000)\n",
    "    S = np.linspace(3900, 11900, 1000)\n",
    "    T3_line = []\n",
    "    s3_line = []\n",
    "    for i in S:\n",
    "        w.SP = i, P\n",
    "        T3_line.append(w.T)\n",
    "        s3_line.append(w.s)\n",
    "    \n",
    "    plt.plot(s3_line, T3_line, color='red')\n",
    "    \n",
    "def plot_estado(estado, offset=10):\n",
    "    t = estado[-2]\n",
    "    s = estado[-1]\n",
    "    plt.scatter(s, t, c='green', s=20)\n",
    "    plt.annotate(str(estado[0]), xy=(s, t), xytext=(s+offset, t+offset))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Funciones del ciclo\n",
    "\n",
    "def bomba(fluido, presion_final, rendimiento):\n",
    "    \"\"\"Compresión adiabática hasta presión final con una bomba con rendimiento\"\"\"\n",
    "    h0 = fluido.h\n",
    "    s0 = fluido.s\n",
    "    fluido.SP = s0, presion_final\n",
    "    h1s = fluido.h\n",
    "    trabajo_isentropico = h1s - h0\n",
    "    trabajo_real = trabajo_isentropico / rendimiento\n",
    "    print('Trabajo isentropico (bomba): {:.3f} J/kg, Trabajo real (bomba): {:.3f} J/kg'.format(trabajo_isentropico, trabajo_real))\n",
    "    h1 = h0 + trabajo_real\n",
    "    fluido.HP = h1, presion_final\n",
    "    return trabajo_real\n",
    "\n",
    "def turbina(fluido, presion_final, rendimiento):\n",
    "    \"\"\"Expansión adiabática hasta presion_final, con una turbina con rendimiento\"\"\"\n",
    "    h0 = fluido.h\n",
    "    s0 = fluido.s\n",
    "    fluido.SP = s0, presion_final\n",
    "    h1s = fluido.h\n",
    "    trabajo_isentropico = h0 - h1s\n",
    "    trabajo_real = trabajo_isentropico * rendimiento\n",
    "    print('Trabajo isentropico (turbina): {:.3f} J/kg, Trabajo real (turbina): {:.3f} J/kg'.format(trabajo_isentropico, trabajo_real))\n",
    "    h1 = h0 - trabajo_real\n",
    "    fluido.HP = h1, presion_final\n",
    "    return trabajo_real\n",
    "\n",
    "def boiler(w, T_final, presion):\n",
    "    \"\"\"Calentamiento del fluido hasta temperatura T_final a presión constante\"\"\"\n",
    "    h_pre = w.h\n",
    "    w.TP = T_final, presion\n",
    "    h_post = w.h\n",
    "    calor_in = h_post - h_pre\n",
    "    print('Calor (boiler):  {:.3f} J/kg'.format(calor_in))\n",
    "    return calor_in\n",
    "\n",
    "def condensador(w, T_final):\n",
    "    \"\"\"Disipación de calor hasta que la fracción sea 0 y a una temperatura T_final\"\"\"\n",
    "    h_pre = w.h\n",
    "    w.TX = T_final, 0.0\n",
    "    h_post = w.h\n",
    "    calor_out = h_pre - h_post\n",
    "    print('Calor disipado (condensador): {:.3f} J/kg'.format(calor_out))\n",
    "    return calor_out\n",
    "\n",
    "def entalpia(fluido):\n",
    "    return fluido.h\n",
    "\n",
    "def print_estados(fluido, id_estado):\n",
    "    h = fluido.h\n",
    "    p = fluido.P\n",
    "    T = fluido.T\n",
    "    s = fluido.s\n",
    "    print('Estado #{} --> h:{:.3f} J/kg, p:{:.3f} Pa, T:{:.2f} K, s:{:.2f} J/kg·K'.format(id_estado, h, p, T, s))\n",
    "    return id_estado, h, p, T, s\n",
    "\n",
    "def eficiencia_ciclo(calor_in, trabajo_turbina, trabajo_bomba):\n",
    "    eficiencia = (trabajo_turbina - trabajo_bomba) / calor_in\n",
    "    print('Eficiencia del ciclo: {:.2f}'.format(eficiencia))\n",
    "    return eficiencia\n",
    "\n",
    "def potencia_ciclo(flujo_vapor, trabajo_turbina, trabajo_bomba):\n",
    "    trabajo_neto = trabajo_turbina - trabajo_bomba\n",
    "    potencia = trabajo_neto * flujo_vapor / 1000\n",
    "    print('Potencia del ciclo: {:.2f} kW'.format(potencia))\n",
    "    return potencia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Estado #1 --> h:-15858194.325 J/kg, p:10000.000 Pa, T:300.00 K, s:3913.20 J/kg·K\n",
      "Trabajo isentropico (bomba): 10002.004 J/kg, Trabajo real (bomba): 10002.004 J/kg\n",
      "Estado #2 --> h:-15848192.321 J/kg, p:10000000.010 Pa, T:300.20 K, s:3913.20 J/kg·K\n",
      "Calor (boiler):  3568890.793 J/kg\n",
      "Estado #3 --> h:-12279301.527 J/kg, p:10000000.002 Pa, T:900.00 K, s:10497.45 J/kg·K\n",
      "Trabajo isentropico (turbina): 1480961.574 J/kg, Trabajo real (turbina): 1480961.574 J/kg\n",
      "Estado #4 --> h:-13760263.101 J/kg, p:10000.000 Pa, T:319.00 K, s:10497.45 J/kg·K\n",
      "Calor disipado (condensador): 2097937.184 J/kg\n",
      "Eficiencia del ciclo: 0.41\n",
      "Potencia del ciclo: 29419.19 kW\n"
     ]
    }
   ],
   "source": [
    "# Condiciones de partida\n",
    "T_inicial = 300\n",
    "P_inicial = 10e3\n",
    "T_turbina = 900\n",
    "P_salida = 10e6\n",
    "flujo_vapor = 20\n",
    "\n",
    "# Definición del fluido\n",
    "w = ct.Water()\n",
    "\n",
    "# Parámetros de los equipos\n",
    "rendimiento_bomba = 1.0\n",
    "rendimiento_turbina = 1.0\n",
    "\n",
    "# Estado 1 (antes de entrar en la bomba/salida del condensador)\n",
    "w.TP = T_inicial, P_inicial\n",
    "h1 = entalpia(w)\n",
    "estado1 = print_estados(w, 1)\n",
    "\n",
    "# Bomba\n",
    "trabajo_bomba = bomba(w, P_salida, rendimiento_bomba)\n",
    "\n",
    "# Estado 2 (a la salida de la bomba/entrada al boiler)\n",
    "h2 = entalpia(w)\n",
    "estado2 = print_estados(w, 2)\n",
    "\n",
    "# Boiler\n",
    "calor_introducido = boiler(w, T_turbina, P_salida)\n",
    "\n",
    "# Estado 3 (a la salida del boiler/entrada de la turbina)\n",
    "h3 = entalpia(w)\n",
    "estado3 = print_estados(w, 3)\n",
    "\n",
    "# Turbina\n",
    "trabajo_turbina = turbina(w, P_inicial, rendimiento_turbina)\n",
    "\n",
    "# Estado 4 (a la salida de la turbina/entrada al condensador)\n",
    "h4 = entalpia(w)\n",
    "estado4 = print_estados(w, 4)\n",
    "\n",
    "# Condensador\n",
    "calor_disipado = condensador(w, T_inicial)\n",
    "\n",
    "# Eficiencia y potencia del ciclo\n",
    "eficiencia = eficiencia_ciclo(calor_introducido, trabajo_turbina, trabajo_bomba)\n",
    "potencia = potencia_ciclo(flujo_vapor, trabajo_turbina, trabajo_bomba)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualización\n",
    "\n",
    "plot_water_curve(w)\n",
    "plot_isobar(P_inicial)\n",
    "plot_isobar(P_salida)\n",
    "\n",
    "plot_estado(estado1, offset=-70)\n",
    "plot_estado(estado2, offset=30)\n",
    "plot_estado(estado3, offset=-70)\n",
    "plot_estado(estado4, offset=30)\n",
    "\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
